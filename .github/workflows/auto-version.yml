name: Auto Version

on:
  pull_request:
    types: [closed, opened, synchronize, labeled, unlabeled]
    branches: ["main", "master"]

jobs:
  validate-labels:
    runs-on: ubuntu-latest
    # Run on all PR events to block merging if invalid
    if: github.event.pull_request.merged != true
    permissions:
      pull-requests: read
      statuses: write

    steps:
      - name: Check Version Labels
        id: check-labels
        run: |
          # Count version labels
          VERSION_LABELS=0
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
            VERSION_LABELS=$((VERSION_LABELS + 1))
          fi
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
            VERSION_LABELS=$((VERSION_LABELS + 1))
          fi
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'patch') }}" == "true" ]]; then
            VERSION_LABELS=$((VERSION_LABELS + 1))
          fi

          TOTAL_VERSION_INDICATORS=$((VERSION_LABELS + TITLE_TAGS))

          if [ $TOTAL_VERSION_INDICATORS -gt 1 ]; then
            echo "Multiple version indicators found. Please use only one label or title tag."
            exit 1
          fi

      - name: Update PR Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = context.job.status
            const state = status === 'success' ? 'success' : 'failure'
            const description = status === 'success' ? 'Version indicators valid' : 'Multiple version indicators found'

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state,
              description,
              context: 'Version Labels Check'
            })

  version:
    # Only run if PR was merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Git Config
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Determine Version Bump
        id: bump
        run: |
          # Read current version
          CURRENT_VERSION=$(cat version.txt)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Determine bump type
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
            MAJOR=$((MAJOR + 1))
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
            MINOR=$((MINOR + 1))
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            PATCH=$((PATCH + 1))
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

          # Create new version string
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

          # Update version.txt
          echo "$NEW_VERSION" > version.txt

      - name: Create Git Tag
        run: |
          git add version.txt
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }}"
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Version ${{ steps.bump.outputs.new_version }}"

      - name: Push Changes
        run: |
          git push
          git push --tags
