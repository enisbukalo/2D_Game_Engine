name: Auto Version

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled, closed]
    branches: ["main", "master"]

jobs:
  validate-labels:
    runs-on: ubuntu-latest
    # Only validate on non-merge events
    if: github.event.action != 'closed'
    permissions:
      pull-requests: read
      statuses: write
      checks: write

    steps:
      - name: Validate Version Labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(l => l.name);
            const versionLabels = ['major', 'minor', 'patch'].filter(l => labels.includes(l));

            if (versionLabels.length > 1) {
              core.setFailed('Multiple version indicators found. Please use only one major, minor, or patch label.');
            }

  increment-version:
    runs-on: ubuntu-latest
    # Only run on merge
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
      pull-requests: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Version Bump
        id: bump
        run: |
          # Read current version
          CURRENT_VERSION=$(cat version.txt)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Determine bump type
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
            MAJOR=$((MAJOR + 1))
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
            MINOR=$((MINOR + 1))
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'patch') }}" == "true" ]]; then
            PATCH=$((PATCH + 1))
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

          # Create new version string
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

          # Update version.txt
          echo "$NEW_VERSION" > version.txt

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.pull_request.head.sha }}
          name: game-engine-v${{ env.VERSION }}
          path: package
        continue-on-error: true

      - name: Debug Artifact Info
        run: |
          echo "PR SHA: ${{ github.event.pull_request.head.sha }}"
          echo "Current Version: ${{ env.VERSION }}"
          echo "New Version: ${{ steps.bump.outputs.new_version }}"
          ls -la package/ || echo "Package directory not found"

      - name: Create Release Package
        run: |
          cd package
          zip -r ../GameEngine-v${{ steps.bump.outputs.new_version }}.zip *

      - name: Create Git Tag and Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add version.txt
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }}"
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Version ${{ steps.bump.outputs.new_version }}"
          git push origin HEAD:${GITHUB_REF#refs/heads/}
          git push origin "v${{ steps.bump.outputs.new_version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: GameEngine v${{ steps.bump.outputs.new_version }}
          tag_name: v${{ steps.bump.outputs.new_version }}
          files: GameEngine-v${{ steps.bump.outputs.new_version }}.zip
          generate_release_notes: true
          body: |
            GameEngine Release v${{ steps.bump.outputs.new_version }}

            ## Usage
             - Download the release package
             - Extract the package
             - Add the GameEngine-d.dll to your project
             - Link the GameEngine-d.lib to your project
             - Include the headers in your project

            ## Requirements
            - Windows
            - C++17 compatible compiler
            - SFML 2.6.x
            - Dear ImGui 1.91.x
            - ImGui-SFML 2.6.x
            - nlohmann_json 3.11.x

            ## Dependencies
            All dependencies are statically linked into the DLL, so you don't need to distribute them separately.
            However, you'll need them installed for development:

            ```cmake
            # CMake example
            find_package(SFML 2.6 COMPONENTS graphics window system REQUIRED)
            find_package(ImGui-SFML 2.6 REQUIRED)
            find_package(nlohmann_json 3.11 REQUIRED)
            ```

            ## Package Contents
            - bin/GameEngine-d.dll - Runtime library
            - lib/GameEngine-d.lib - Import library for linking
            - include/ - Header files
